
设计模式的目的：
    代码重用性 即相同功能的代码不用多次编写
    可读性 即程序编码的规范性
    可扩展 即当需要增加新功能时 只需增加自己的业务代码无需更改已用代码
    可靠性 即我们增加了新的功能后， 对原来的程序没有影响
    高内聚 低耦合



设计模式七大原则：
    1，单一职责原则
        一个类只负责项职责 非指一个类里只有一个方法
    2，接口隔离原则
        客户端不应该依赖它不需要的接口 拆分需要和不需要使用的接口 被依赖的接口中不应该存在不使用的方法 可以实现多个接口 所以此操作无误
    3，依赖倒置原则
        接口定义方法 实现交由实现类 接口可以多类
    4，里氏替换原则
        继承重写会破坏系统的  尽量不要重写方法 继承基层类 降低耦合性
    5，开闭原则
        通过抽象构建框架，用实现扩展细节
    6，迪米特原则
        又叫最少知道原则 一个类对自己依赖的类知道的越少越好 当一个类依赖了一个类 那么他们两已经耦合了
    7，合成复用原则
        原则尽量使用合成/聚合的方式 而不是使用继承



认识误区：
    依赖不仅仅是继承或者是实现接口，只要局部变量用到了某个对象，那么就是依赖于该对象 包括返回类型 方法的参数类型

    泛化关系是依赖关系的特例 继承的意思

    类图实现关系 就是实现了某个借口
        关联关系 单向一对一 双向一对一
        聚合关系 对象里面有成员变量为其他类且赋值 那么这两个类就是聚合关系
        组合关系 未赋值

设计模式类型：
    1， 创建型模式
        单例模式 抽象工厂模式 原型模式 建造者模式 工厂模式
    2， 结构型模式
        适配器模式 桥接模式 装饰模式 组合模式 外观模式 享元模式 代理模式
    3， 行为型模式
        模版方法模式 命令模式 访问者模式 迭代器模式 观察者模式 中介者模式 备忘录模式 解释器模式 状态模式 策略模式 责任链模式
